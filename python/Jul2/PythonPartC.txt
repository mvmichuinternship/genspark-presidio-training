p     i     n
a   l s   i g
y a   h r
p     i 


1.
substr= ""
        max_count= 0
        curr_count= 0
        k=0
        for i in s:
            if i in substr:
                for j in range(len(substr)):
                    if i==substr[j]:
                        k=j+1
                        break
                substr= substr[k:]
                curr_count= len(substr)
            substr += i
            curr_count= len(substr)
            max_count = curr_count if curr_count> max_count else max_count
        return max_count


2.
if(numRows  < 2):
            return s
        arr = ['']*numRows
        dir = 0
        row = 0
        for i in s:
            arr[row] += i
            if row == numRows-1:
                dir = 1
            elif row == 0:
                dir = 0
            if(dir == 0):
                row += 1
            else:
                row -= 1
        return(''.join(arr))




3.
  total=0
        mini=[]
        
        # l=nums[0]
        # r=nums[len(nums)-1]
        for i in range(1,len(nums)-1):
            l=nums[i-1]
            for j in range(i+1,len(nums)):
                if(i!=j):
                    # print(l)
                    m=nums[i]
                    # print(m)
                    r=nums[j]
                    # print(r)
                    total=l+r+m
                    # print(total)
                    mini.append(total)
        print(mini)
        res= mini[0]    
        for i in mini:
            if target==i:
                res=i
                break
            elif abs(target-i) <abs(target-res):
                res=i
            elif target-i <target-res:
                res=i
            # print(res)
        return res



5.
ints = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}
        intToStr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

        result = [0]*(len(num1) + len(num2))
        string = ''

        for i in range(-1, -1*len(num1)-1, -1):
            for j in range(-1, -1*len(num2)-1, -1):            

                result[i+j+1] += ints[num1[i]]*ints[num2[j]]
                result[i+j] += result[i+j+1] // 10
                result[i+j+1] %= 10

        for j in result:
            string += intToStr[j]
            
        string = string.lstrip('0')

        return '0' if (string == '') else string


6.
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        res=[]
        dict1={}
        for s in strs:
            sortedstr=''.join(sorted(s))

            if sortedstr not in dict1:
                dict1[sortedstr]=[]

            dict1[sortedstr].append(s)
        res=list(dict1.values())
        return res



7.
ints = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}
        intToStr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

        result = [0]*(len(num1) + len(num2))
        string = ''

        for i in range(-1, -1*len(num1)-1, -1):
            for j in range(-1, -1*len(num2)-1, -1):            

                result[i+j+1] += ints[num1[i]]*ints[num2[j]]
                result[i+j] += result[i+j+1] // 10
                result[i+j+1] %= 10

        for j in result:
            string += intToStr[j]
            
        string = string.lstrip('0')

        return '0' if (string == '') else string



8.
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        if len(nums)<=1: return 1
        i=0
        best_i=0
        bestjump= nums[0]
        while i< len(nums)-1:
            for j in range(i+1,nums[i]+i+1):
                if nums[j]+j>bestjump:
                    best_i= j
                    bestjump=nums[j]+j
                if bestjump>=len(nums)-1:
                    return 1
            if i==best_i:
                return 0
            i=best_i
